version: '2.1'

services:

  eureka-server:
  
    depends_on:

      config-service:

        condition: service_healthy

    restart: always

    network_mode: "host"

    build: eureka-server/
   
    image: eureka-server

    container_name: eureka-server

    hostname: localhost

    ports:

      - 8761:8761

    healthcheck:

      test: "exit 0"



  config-service:

   build: config-service/
   
   image: config-server

   container_name: config-server
   
   restart: always

   network_mode: "host"

   hostname: localhost

   ports:

    - 8891:8891

   healthcheck:

    test: "exit 0"



  api-gateway:

   build: zuul-apigateway/
   
   image: api-gateway

   container_name: api-gateway

   depends_on:

    config-service:

     condition: service_healthy

    eureka-server:

     condition: service_healthy

   restart: always

   network_mode: "host"

   hostname: localhost

   ports:

    - 8080:8080

   healthcheck:

    test: "exit 0"
    

  user-login:

   build: user-login/
   
   image: user-auth

   container_name: user-login
   network_mode: "host"
   hostname: localhost
   ports:
      - 8082:8082
   depends_on:
     eureka-server:
       condition: service_healthy
     database:
       condition: service_healthy
   healthcheck:
     test: "exit 0"



  database:
  
   container_name: mysql-login

   image: mysql:5.5

   ports:

    - 3306:3306
    
   environment:
 
    MYSQL_ALLOW_EMPTY_PASSWORD: "true" 

    MYSQL_DATABASE: go_d
    
    MYSQL_USER: root
    
   volumes:
      - /opt/data:/var/lib/mysql
      
   network_mode: "host"
   
   hostname: localhost
    
   healthcheck:

    test: exit 0




  user-profile:
  
   build: user-profile/
   
   image: user-profile

   restart: always

   network_mode: host

   container_name: userprofile

   depends_on:

    - mongo

   ports:

    - 8070:8070

   healthcheck:

    test: "exit 0"


  Order-details:
  
   build: Order-details/
   
   image: order-details

   restart: always

   network_mode: host

   container_name: Orderdetails

   depends_on:

    - mongo

   ports:

    - 8081:8081

   healthcheck:

    test: "exit 0"


  logistics-service:
  
   build: logistics-service/
   
   image: logistics-service

   restart: always

   network_mode: host

   container_name: logistics-service

   depends_on:

    - mongo

   ports:

    - 8086:8086

   healthcheck:

    test: "exit 0"


  mongo:

   image: mongo

   network_mode: host

   container_name: spring-mongo

   ports:

    - 27017:27017

   volumes:

    - /usr/src/home:/data/db
    
   healthcheck:

    test: exit 0

    

  book-service:

   build: book-service/

   image: book-service

   restart: always

   network_mode: host

   container_name: bookservice

   depends_on:

    - mongo

   ports:

    - 8888:8888

   healthcheck:

    test: "exit 0"
    

  recommendation:
  
   build: recommendation/
   
   image: recommendation

   restart: always

   network_mode: host

   container_name: recommendation

   depends_on:

    - neo4j

   ports:

    - 8092:8092

   healthcheck:

    test: "exit 0"


  neo4j:

   image: neo4j

   container_name: spring-neo4j

   ports:

    - 7474:7474
    - 7687:7687

   volumes:

    - $HOME/neo4j/data:/data
   environment: 
    - NEO4J_AUTH=none

   healthcheck:

    test: "exit 0"


  prometheus:
    ports:
      - 9090:9090
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
    image: prom/prometheus
    network_mode: host 
    hostname: localhost
    restart: always
    healthcheck:
      test: "exit 0"

  grafana:
    image: grafana/grafana
    container_name: grafana
    volumes:
      - /var/lib/grafana
    restart: always
    network_mode: host 
    hostname: localhost
    ports:
      - 3000:3000
    environment:
     - GF_SECURITY_ADMIN_USER=${ADMIN_USER:-admin}
     - GF_SECURITY_ADMIN_PASSWORD=${ADMIN_PASSWORD:-admin}
     - GF_USERS_ALLOW_SIGN_UP=false
    healthcheck:
      test: "exit 0"


  zookeeper:
   image: wurstmeister/zookeeper
   ports:
    - "2181:2181"
   restart: always
   network_mode: host 
   hostname: localhost
   healthcheck:

    test: "exit 0"
    
       
  
  kafka:
   image: wurstmeister/kafka
   hostname: kafka
   container_name: kafka
   depends_on:
    - zookeeper
   ports:
    - '9092:9092'
   environment:
    KAFKA_ZOOKEEPER_CONNECT: 'localhost:2181'
    KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://localhost:9092
    KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092
    KAFKA_CREATE_TOPICS: "userprofile:1:1, book_details:1:1"
   restart: always
   network_mode: host 
   hostname: localhost
   healthcheck:

    test: "exit 0"